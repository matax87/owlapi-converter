% define additional custom namespaces
% to refer to concept/property/object defined in a given namespace use a prefix notation ns:name, e.g., owl:Thing, owl:Nothing
\ns ns1: <http://www.namespace1.com/ns1#>
\ns ns2: <http://www.namespace2.com/ns2#>

% define base namespace for this ontology
\ns <http://basenamespace.owl#>

\begin{ontology}
% import ontologies
% \import <http://www.firstontology.org/first.owl>
% \import <http://www.firstontology.org/second.owl>

% now you can specify the axioms of the ontology
Person \cisa owl:Thing
Person \a{rdfs:label, "Person"}
Person \a{rdfs:comment, "This is a class for representing people"}
Person \cisa \candof{\d[>=1]{hasName}, \d[=1]{hasSurname}, \oexists{hasSex}{Sex}, \d[=1]{hasAge}}

% if some already existing ontologies are required to be reused without cutting-and-pasting them into the current ontology, the input command can be used
\input{/input.txt}

% hasName, hasSurname, and hasAge are datatype properties
hasName \ddomain Person
hasName \drange xsd:string
hasName \a{rdfs:comment, "Person's name"}
hasSurname \ddomain Person
hasSurname \drange xsd:string
hasSurname \a{rdfs:comment, "Person's surname"}
hasAge \ddomain Person
hasAge \drange xsd:integer

% let us define another datatype property by enumerating possible values
hasHairColor \ddomain Person
hasHairColor \drange \droneof{"Blonde", "Brown", "Red"}

% if we have another property hasLastName, we can define it as equal to the property hasSurname
hasLastName \deq hasSurname

% sex can be defined as a concept containing two objects, male and female
Sex \ceq \ooneof{M, F}

M \a{rdfs:label, "Male"}
F \a{rdfs:label, "Female"}

Father \cisa Person
Child \cisa (Person \cand \oexists{hasFather}{Father})

% if we want to reuse some concept defined in the other namespace
Father \cisa ns1:Father
ns1:isFatherOf \oinv hasFather

% property has father is functional
hasFather \ofunc

% let's populate the ontology with some individual data
Person(john)

% to express the fact that john and johny both refer to the same individual one can use the object equality construct
john \ieq johny

hasName(john, "John")
hasSurname(john, "Wild")
hasAge(john, "35"[xsd:integer])
hasSex(john, M)

Child(katty)
% to express the fact that john is different from katty one can use the object difference construct
katty \idiff john
hasName(katty, "Katty")
hasSurname(katty, "Wild")
hasSex(katty, F)
hasAge(katty, "3"[xsd:integer])

% John is Katty's father
hasFather(katty, john)

\end{ontology}